package com.libo.dao;

import java.util.Iterator;
import java.util.List;

import org.hibernate.CacheMode;
import org.hibernate.FetchMode;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.ScrollMode;
import org.hibernate.ScrollableResults;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Property;
import org.hibernate.criterion.Restrictions;

import com.libo.po.Classes;
import com.libo.po.Students;
import com.libo.utils.HibernateUtil;

public class StuImpl implements StuDao {
	public static void main(String[] args) {
		Session session = HibernateUtil.getSession();
		session.getTransaction().begin();

		/*
		 * String hql=
		 * "select distinct s from Students s inner join fetch s.classes c where c.clsId=:clsId"
		 * ; Query q=session.createQuery(hql); q.setInteger("clsId", 3); List
		 * list=q.list();
		 */

		List list = session.createCriteria(Classes.class)
				.add(Restrictions.gt("clsId", 0)).createCriteria("studentses")
				.add(Restrictions.gt("stuId", 2)).list();
		List

		list1 = session.createCriteria(Classes.class)
				.add(Restrictions.gt("clsId", 0))
				.createAlias("studentses", "s")
				.add(Restrictions.gt("s.stuId", 2)).list();

		List list2 = session
				.createCriteria(Classes.class)
				.add(Restrictions.gt("clsId", 0))
				.setFetchMode("students", FetchMode.JOIN)
				.setProjection(
						Projections
								.projectionList()
								.add(Property.forName("clsName"))
								.add(Projections.rowCount())
								.add(Projections.max("clsId"))
								.add(Projections.alias(
										Projections.count("clsName"), "c"))
								.add(Projections.groupProperty("clsId"))
								.add(Projections.groupProperty("clsName")))
				.addOrder(Order.asc("c")).list();
		
		DetachedCriteria query = DetachedCriteria.forClass(Students.class)
				.setProjection(Property.forName("stuName"));
		List list3 = query.getExecutableCriteria(session).list();
		
		DetachedCriteria subQuery=DetachedCriteria.forClass(Students.class)
				.setProjection(Property.forName("stuName"));
		List list4=session.createCriteria(Students.class).add(Property.forName("stuId").in(subQuery))
				.list();
				
		for (Iterator i = list3.iterator(); i.hasNext();) {
			Object o = i.next();
			//Students ss=(Students)o;
			Class<?> c=o.getClass();
			boolean isStu=c.isAssignableFrom(Students.class);
			boolean isCls=c.isAssignableFrom(Classes.class);
			boolean isObjs=c.isAssignableFrom(new Object[0].getClass());
			if (isCls ||o instanceof Classes) {
				System.out.println(((Classes) o).getClsName());
				System.out.println(((Classes) o).getStudentses());
			} else if (isStu || o instanceof Students) {
				Students s = (Students) o;
				System.out.println(((Students) o).getStuName());
			} else if(isObjs || o instanceof Students){
				Object[] objs = (Object[]) o;
				System.out.println(objs[0].toString() + "/"
						+ objs[4].toString());
			}else {
			
				System.out.println(o);
			}

		}
		session.getTransaction().commit();
		session.close();
	}

	private void addStudents(List<Students> stus) throws Exception {
		Session session = HibernateUtil.getSession();
		Transaction tx = session.beginTransaction();
		for (int i = 0; i < stus.size(); i++) {
			Students s1 = stus.get(i);
			session.save(s1);
			if (i % 20 == 0) {
				session.flush();
				session.clear();
			}

		}
		tx.commit();
		HibernateUtil.closeSession();
	}

	private void updateStudents() throws Exception {
		Session session = HibernateUtil.getSession();
		Transaction tx = session.beginTransaction();
		ScrollableResults students = session.createQuery("from Students")
				.setCacheMode(CacheMode.IGNORE).scroll(ScrollMode.FORWARD_ONLY);
		int count = 0;
		while (students.next()) {
			Students s = (Students) students.get(0);
			if (++count % 20 == 0) {
				session.flush();
				session.clear();
			}

		}
		tx.commit();
		HibernateUtil.closeSession();
	}

	private void updateStudents2() throws Exception {
		Session session = HibernateUtil.getSession();
		Transaction tx = session.beginTransaction();
		String hqlUpdate = "update Students set name=:newName";
		int updateEntities = session.createQuery(hqlUpdate)
				.setString("newName", "新名字").executeUpdate();
		tx.commit();
		HibernateUtil.closeSession();
	}

	private void deleteStudents() throws Exception {
		Session session = HibernateUtil.getSession();
		Transaction tx = session.beginTransaction();
		String hqlDelete = "delete Students";
		int deletedEntities = session.createQuery(hqlDelete).executeUpdate();
		tx.commit();
		HibernateUtil.closeSession();
	}

	@Override
	public List<Students> queryAll(Students stu) {
		// TODO Auto-generated method stub
		Session session = HibernateUtil.getSession();
		String hql = "from Students";
		if (stu != null && stu.getStuId() != null) {
			hql += " where stuId=:stuId";
		}
		Query q = session.createQuery(hql);
		q.setProperties(stu);
		List<Students> list = q.list();
		return list;
	}

	@Override
	public boolean delete(Students stu) {
		// TODO Auto-generated method stub
		try {
			HibernateUtil.getSession().delete(stu);
		} catch (HibernateException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return false;
		}
		return true;
	}

	@Override
	public boolean saveOrUpdate(Students stu) {
		// TODO Auto-generated method stub

		try {
			HibernateUtil.getSession().saveOrUpdate(stu);
		} catch (HibernateException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return false;
		}
		return true;
	}

	@Override
	public List<Classes> queryAllClasses(Classes cla) {
		// TODO Auto-generated method stub
		Session session = HibernateUtil.getSession();
		String hql = "from Classes";
		if (cla != null && cla.getClsId() != null) {
			hql += " where clsId=:clsId";
		}
		Query q = session.createQuery(hql);
		q.setProperties(cla);
		List<Classes> list = q.list();
		return list;
	}

}
